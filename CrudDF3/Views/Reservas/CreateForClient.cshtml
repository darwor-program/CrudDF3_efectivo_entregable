@model CrudDF3.Models.ViewModels.CreateReservaViewModel
@using CrudDF3.Models.ViewModels

@{
    ViewData["Title"] = "Crear Nueva Reserva";
    var paquetes = Model.PaquetesDisponibles as IList<PaqueteSelectionViewModel> ?? new List<PaqueteSelectionViewModel>();
}

<h1>@ViewData["Title"]</h1>
<hr />

<div class="row">
    <div class="col-md-12">
        <form asp-action="Create" method="post" id="reservaForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Información del Usuario (solo lectura para clientes) -->
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h5>Información del Cliente</h5>
                </div>  
                <div class="card-body">
                    <div class="form-group">
                        <label class="control-label">Usuario</label>
                        <input type="text" class="form-control" value="@Model.Usuarios.First().Text" readonly />
                        <input type="hidden" asp-for="IdUsuario" />
                    </div>
                </div>
            </div>

            <!-- Sección de Datos de Reserva -->
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="FechaInicial" class="control-label">Fecha Inicial</label>
                        <input asp-for="FechaInicial" class="form-control" type="date" />
                        <span asp-validation-for="FechaInicial" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="FechaFinal" class="control-label">Fecha Final</label>
                        <input asp-for="FechaFinal" class="form-control" type="date" />
                        <span asp-validation-for="FechaFinal" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="NumeroPersonas" class="control-label">Número de Personas</label>
                        <input asp-for="NumeroPersonas" class="form-control" min="1" />
                        <span asp-validation-for="NumeroPersonas" class="text-danger"></span>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="Valor" class="control-label">Valor Total</label>
                        <input asp-for="Valor" class="form-control" readonly id="valorTotal" />
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="Anticipo" class="control-label">Anticipo (30%)</label>
                        <input asp-for="Anticipo" class="form-control" readonly id="anticipoInput" />
                    </div>
                </div>
            </div>

            <!-- Sección de Paquetes Turísticos -->
            <div class="card mt-4">
                <div class="card-header bg-primary text-white">
                    <h5>Paquetes Turísticos Disponibles</h5>
                </div>
                <div class="card-body">
                    @if (paquetes.Count > 0)
                    {
                        <div class="alert alert-info">
                            Seleccione uno o más paquetes para su reserva
                        </div>

                        <div class="row">
                            @for (int i = 0; i < paquetes.Count; i++)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <input type="hidden" asp-for="@Model.PaquetesDisponibles[i].IdPaquete" />
                                            <input type="hidden" asp-for="@Model.PaquetesDisponibles[i].PrecioPaquete" class="paquete-precio" />

                                            <div class="form-check">
                                                <input class="form-check-input paquete-checkbox" 
                                                       type="checkbox"
                                                       name="PaquetesSeleccionados" 
                                                       value="@paquetes[i].IdPaquete"
                                                       data-precio="@paquetes[i].PrecioPaquete"
                                                       @(Model.PaquetesSeleccionados.Contains(paquetes[i].IdPaquete) ? "checked" : "") />
                                                <label class="form-check-label">
                                                    <strong>@paquetes[i].NombrePaquete</strong>
                                                </label>
                                            </div>

                                            <p class="card-text small mt-2">@paquetes[i].DescripcionPaquete</p>
                                            
                                            <div class="d-flex justify-content-between align-items-center mt-2">
                                                <span class="badge bg-success">@paquetes[i].PrecioPaquete?.ToString("C")</span>
                                                <small class="text-muted">@paquetes[i].DestinoPaquete</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            No hay paquetes turísticos disponibles en este momento
                        </div>
                    }
                </div>
            </div>

            <!-- Fecha de Reserva (oculta, se establecerá automáticamente) -->
            <input type="hidden" asp-for="FechaReserva" value="@DateTime.Now" />
            <input type="hidden" asp-for="EstadoReserva" value="true" />

            <!-- Botones de Acción -->
            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-calendar-plus"></i> Solicitar Reserva
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Volver a Mis Reservas
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            // Función mejorada para calcular capacidad
            function calcularCapacidad() {
                let paquetesSeleccionados = $('.paquete-checkbox:checked').map(function() {
                    return parseInt($(this).val());
                }).get();

                console.log("Paquetes seleccionados:", paquetesSeleccionados);

                if (paquetesSeleccionados.length > 0) {
                    $.ajax({
                        url: '/Reservas/CalcularCapacidad',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({
                            paquetesIds: paquetesSeleccionados
                        }),
                        success: function(data) {
                            console.log("Respuesta del servidor:", data);
                            if(data.error) {
                                console.error('Error:', data.error);
                                return;
                            }
                            $('#numeroPersonas').val(data.capacidadTotal);
                            $('input[name="NumeroPersonas"]').val(data.capacidadTotal);
                        },
                        error: function(xhr, status, error) {
                            console.error('Error en la solicitud:', error);
                            $('#numeroPersonas').val(1);
                        }
                    });
                } else {
                    $('#numeroPersonas').val(1); // Valor por defecto
                }
            }

            // Función para calcular totales
            function calcularTotales() {
                let total = 0;
                $('.paquete-checkbox:checked').each(function() {
                    total += parseFloat($(this).data('precio')) || 0;
                });

                $('#valorTotal').val(total.toFixed(2));
                $('#anticipoInput').val((total * 0.3).toFixed(2));
                $('input[name="Valor"]').val(total.toFixed(2));
                $('input[name="Anticipo"]').val((total * 0.3).toFixed(2));
            }

            // Evento de cambio en los checkboxes
            $(document).on('change', '.paquete-checkbox', function() {
                calcularCapacidad();
                calcularTotales();
            });

            // Calcular valores iniciales si hay checkboxes marcados
            if ($('.paquete-checkbox:checked').length > 0) {
                calcularCapacidad();
                calcularTotales();
            }

            // Función para calcular totales
            function calcularTotales() {
                let total = 0;
                $('.paquete-checkbox:checked').each(function() {
                    total += parseFloat($(this).data('precio')) || 0;
                });

                $('#valorTotal').val(total.toFixed(2));
                $('#anticipoInput').val((total * 0.3).toFixed(2));
                $('input[name="Valor"]').val(total.toFixed(2));
                $('input[name="Anticipo"]').val((total * 0.3).toFixed(2));
            }

            // Evento de cambio en los checkboxes
            $(document).on('change', '.paquete-checkbox', function() {
                calcularCapacidad();
                calcularTotales();
            });

            // Calcular valores iniciales si hay checkboxes marcados
            if ($('.paquete-checkbox:checked').length > 0) {
                calcularCapacidad();
                calcularTotales();
            }

            // Función para calcular el total y anticipo
            function calcularTotales() {
                let total = 0;
                $('.paquete-checkbox:checked').each(function() {
                    const precio = parseFloat($(this).data('precio')) || 0;
                    total += precio;
                });

                const formattedTotal = total.toFixed(2);
                const formattedAnticipo = (total * 0.3).toFixed(2);

                $('#valorTotal').val(formattedTotal);
                $('#anticipoInput').val(formattedAnticipo);
                $('input[name="Valor"]').val(formattedTotal);
                $('input[name="Anticipo"]').val(formattedAnticipo);
            }

            // Evento cuando cambian los paquetes seleccionados
            $(document).on('change', '.paquete-checkbox', function() {
                calcularCapacidad();
                calcularTotales();
            });

            // Calcular al cargar si hay selecciones
            if ($('.paquete-checkbox:checked').length > 0) {
                calcularCapacidad();
                calcularTotales();
            }

            // Validación de fechas
            $('input[type="date"]').change(function() {
                const fechaInicial = new Date($('#FechaInicial').val());
                const fechaFinal = new Date($('#FechaFinal').val());

                if (fechaInicial && fechaFinal && fechaInicial > fechaFinal) {
                    alert('La fecha final debe ser posterior a la fecha inicial');
                    $('#FechaFinal').val('');
                }
            });

            // Validación de stock al enviar
            $('#reservaForm').on('submit', function(e) {
                let sinStock = false;
                let paquetesSinStock = [];
                let checkedBoxes = $('.paquete-checkbox:checked');

                if (checkedBoxes.length === 0) {
                    e.preventDefault();
                    alert('Debe seleccionar al menos un paquete turístico');
                    return false;
                }

                const verificaciones = checkedBoxes.map(function() {
                    const paqueteId = $(this).val();
                    return $.ajax({
                        url: '/PaquetesTuristicos/VerificarStock',
                        type: 'GET',
                        data: { id: paqueteId }
                    }).then(function(data) {
                        if (data.stock <= 0) {
                            sinStock = true;
                            paquetesSinStock.push(data.nombre);
                        }
                    });
                });

                $.when.apply($, verificaciones).done(function() {
                    if (sinStock) {
                        e.preventDefault();
                        alert('Los siguientes paquetes no tienen stock disponible:\n' + paquetesSinStock.join('\n'));
                    }
                });

                return true;
            });
        });
    </script>
}